<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CanNotFindNamedConfigElement" xml:space="preserve">
    <value>不能找到名称为{0}的配置集合元素</value>
  </data>
  <data name="CanNotFindXmlNode" xml:space="preserve">
    <value>不能在Xml节点{0}下找到{1}</value>
  </data>
  <data name="CanNotFoundConfigSection" xml:space="preserve">
    <value>不能在配置文件中找到配置节"{0}"</value>
  </data>
  <data name="CanNotFoundConfigSectionElement" xml:space="preserve">
    <value>不能在配置文件中找到配置节"{0}"的详细定义部分</value>
  </data>
  <data name="CollectionIsReadOnly" xml:space="preserve">
    <value>集合类是只读的，不能执行该操作</value>
  </data>
  <data name="ConvertXmlNodeToPropertyError" xml:space="preserve">
    <value>Xml节点{0}转换到属性{1}出错，{2}</value>
  </data>
  <data name="DefaultTextFormat" xml:space="preserve">
    <value>Timestamp: {timestamp}
Title: {title}
EventID: {eventid}
Message: {message}
Priority: {priority}
EventType: {eventtype}
StackTrace: {newline}{stacktrace}
Machine: {machine}
Extended Properties: {newline}{dictionary({key} - {value}{newline})}</value>
  </data>
  <data name="DependencyChanged" xml:space="preserve">
    <value>Cache项{0}失效了，失效的依赖条件类型是{1}</value>
  </data>
  <data name="DuplicateDescriptorKey" xml:space="preserve">
    <value>在集合中添加对象类型{0}时，Key属性值"{1}"重复</value>
  </data>
  <data name="DuplicateKey" xml:space="preserve">
    <value>已添加了具有相同键的项: {0}</value>
  </data>
  <data name="ExceptionConflictPathDefinition" xml:space="preserve">
    <value>应用'{0}' 定义了相互冲突的路径'{1}' 和  '{2}'</value>
  </data>
  <data name="ExceptionNullOrEmptyString" xml:space="preserve">
    <value>The value can not be null or an empty string.</value>
  </data>
  <data name="ExceptionSerializationFormatterType" xml:space="preserve">
    <value>The formatter type '{0}' of '{1}'  is invalid.</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>文件"{0}"不存在</value>
  </data>
  <data name="GlobalFileNotFound" xml:space="preserve">
    <value>Meta中配置的全局配置文件"{0}"不存在</value>
  </data>
  <data name="InitialPropertyError" xml:space="preserve">
    <value>初始化类属性失败。错误信息：{0}</value>
  </data>
  <data name="InvalidMemberInfoType" xml:space="preserve">
    <value>成员{0}，对象映射时不支持的成员类型{1}</value>
  </data>
  <data name="MetaFileNotFound" xml:space="preserve">
    <value>Meta文件"{0}"不存在</value>
  </data>
  <data name="ReflectedPropertyTokenNotFound" xml:space="preserve">
    <value>&lt;Error: property {0} not found&gt;</value>
  </data>
  <data name="StringParamCanNotBeNullOrEmpty" xml:space="preserve">
    <value>字符串参数{0}不能为Null或空串</value>
  </data>
  <data name="TypeLoadException" xml:space="preserve">
    <value>不能加载类型{0}</value>
  </data>
  <data name="TypeMustBeEnum" xml:space="preserve">
    <value>类型{0}必须是枚举类型</value>
  </data>
</root>