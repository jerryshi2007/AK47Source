CREATE PROCEDURE [WF].[QueryUserRelativeRunningProcesses]
	@userID NVARCHAR(36)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @Processes TABLE(
		INSTANCE_ID NVARCHAR(36) PRIMARY KEY,
		RESOURCE_ID NVARCHAR(36) NULL,
		APPLICATION_NAME NVARCHAR(64) NULL,
		[PROGRAM_NAME] NVARCHAR(64) NULL,
		PROCESS_NAME NVARCHAR(255) NULL,
		DESCRIPTOR_KEY NVARCHAR(255) NULL,
		CREATOR_ID NVARCHAR(36) NULL,
		CREATOR_NAME NVARCHAR(64) NULL,
		DEPARTMENT_ID NVARCHAR(36) NULL,
		DEPARTMENT_NAME NVARCHAR(64) NULL,
		START_TIME DATETIME NULL,
		[STATUS] NVARCHAR(64) NULL,
		[COMMITTED] NCHAR(1) NULL,
		TASK_TITLE NVARCHAR(255) NULL,
		IS_TASK INT NULL,
		LASTEST_TASK_ID NVARCHAR(36) NULL
	)

	DECLARE @Activities TABLE(
		PROCESS_ID NVARCHAR(36),
		ACTIVITY_ID NVARCHAR(36),
		[STATUS] NVARCHAR(64) NULL,
		PRIMARY KEY CLUSTERED (PROCESS_ID ASC, ACTIVITY_ID ASC)
	)

	INSERT INTO @Activities
	SELECT ACT.PROCESS_ID, ACT.ACTIVITY_ID, ACT.STATUS
	FROM WF.PROCESS_CURRENT_ACTIVITIES ACT
	WHERE EXISTS( 
		SELECT ACTIVITY_ID
		FROM WF.PROCESS_CURRENT_ASSIGNEES A
		WHERE A.USER_ID = @userID AND A.ACTIVITY_ID = ACT.ACTIVITY_ID
	) AND ACT.STATUS <> 'Completed' AND ACT.STATUS <> 'Aborted'

	INSERT INTO @Processes(INSTANCE_ID, RESOURCE_ID, APPLICATION_NAME, PROGRAM_NAME, PROCESS_NAME, DESCRIPTOR_KEY, CREATOR_ID,
		CREATOR_NAME, DEPARTMENT_ID, DEPARTMENT_NAME, START_TIME, STATUS, COMMITTED, IS_TASK)
	SELECT P.INSTANCE_ID, P.RESOURCE_ID, P.APPLICATION_NAME, P.PROGRAM_NAME, P.PROCESS_NAME, P.DESCRIPTOR_KEY, P.CREATOR_ID,
		P.CREATOR_NAME, P.DEPARTMENT_ID, P.DEPARTMENT_NAME, P.START_TIME, P.STATUS, P.COMMITTED, 0
	FROM WF.PROCESS_INSTANCES P
	WHERE P.COMMITTED = 1 AND P.STATUS <> 'Completed' AND P.STATUS <> 'Aborted' AND
	EXISTS (SELECT PROCESS_ID FROM @Activities WHERE PROCESS_ID = P.INSTANCE_ID)

	UPDATE @Processes
	SET IS_TASK = 1
	FROM @Processes P
	WHERE EXISTS(SELECT STATUS FROM @Activities
		WHERE STATUS IN ('Running', 'Pending') AND PROCESS_ID = P.INSTANCE_ID)

	DECLARE @TaskInfo TABLE(
		TASK_GUID NVARCHAR(36),
		PROCESS_ID NVARCHAR(36) NULL,
		TASK_TITLE NVARCHAR(255) NULL
	)

	--从待办中获取信息
	INSERT INTO @TaskInfo(TASK_GUID, PROCESS_ID, TASK_TITLE)
	SELECT U.TASK_GUID, U.PROCESS_ID, U.TASK_TITLE
	FROM WF.USER_TASK U INNER JOIN (
		SELECT PROCESS_ID, MAX(DELIVER_TIME) AS MAX_DELIVER_TIME
		FROM WF.USER_TASK U INNER JOIN @Processes P ON U.PROCESS_ID = P.INSTANCE_ID
		GROUP BY PROCESS_ID) LT ON U.PROCESS_ID = LT.PROCESS_ID AND U.DELIVER_TIME = LT.MAX_DELIVER_TIME

	UPDATE @Processes
	SET TASK_TITLE = TI.TASK_TITLE, LASTEST_TASK_ID = TI.TASK_GUID
	FROM @Processes P INNER JOIN @TaskInfo TI ON P.INSTANCE_ID = TI.PROCESS_ID

	DELETE @TaskInfo

	--从已办中获取信息
	INSERT INTO @TaskInfo(TASK_GUID, PROCESS_ID, TASK_TITLE)
	SELECT U.TASK_GUID, U.PROCESS_ID, U.TASK_TITLE
	FROM WF.USER_ACCOMPLISHED_TASK U INNER JOIN (
			SELECT PROCESS_ID, MAX(DELIVER_TIME) AS MAX_DELIVER_TIME
			FROM WF.USER_ACCOMPLISHED_TASK U INNER JOIN @Processes P ON U.PROCESS_ID = P.INSTANCE_ID
			WHERE P.LASTEST_TASK_ID IS NULL
			GROUP BY PROCESS_ID) LT 
		ON U.PROCESS_ID = LT.PROCESS_ID AND U.DELIVER_TIME = LT.MAX_DELIVER_TIME

	UPDATE @Processes
	SET TASK_TITLE = TI.TASK_TITLE, LASTEST_TASK_ID = TI.TASK_GUID
	FROM @Processes P INNER JOIN @TaskInfo TI ON P.INSTANCE_ID = TI.PROCESS_ID

	SELECT *
	FROM @Processes
	ORDER BY START_TIME

	SET NOCOUNT OFF
END