CREATE PROCEDURE [dbo].[COPY_APPLICATION_DATA]
@PARENT_APP_ID NVARCHAR(36),
@CURRENT_APP_ID NVARCHAR(36)
AS
DECLARE
@INHERITED_STATE INT
--获得继承状态
SELECT @INHERITED_STATE=INHERITED_STATE 
FROM APPLICATIONS
WHERE ID = @CURRENT_APP_ID;
DECLARE
@SCOPE_STATE BIT,	--服务范围继承状态
@ROLE_STATE BIT,	--角色继承状态
@FUNC_STATE BIT,	--功能继承状态
@RTF_STATE BIT,		--角色功能关系继承状态
@OBJ_STATE BIT		--被授权对象继承状态
--获得分项继承状态
SET @SCOPE_STATE= @INHERITED_STATE & 1;
SET @ROLE_STATE = @INHERITED_STATE & 2;
SET @FUNC_STATE = @INHERITED_STATE & 4;
SET @RTF_STATE 	= @INHERITED_STATE & 8;
SET @OBJ_STATE	= @INHERITED_STATE & 16;
--复制服务范围
IF (@SCOPE_STATE=1) 
BEGIN
	INSERT INTO SCOPES(ID, APP_ID, NAME, CODE_NAME, EXPRESSION, DESCRIPTION, CLASSIFY, SORT_ID, INHERITED, MODIFY_TIME)
	SELECT NEWID(), @CURRENT_APP_ID, NAME, CODE_NAME, EXPRESSION, DESCRIPTION, CLASSIFY, SORT_ID, 'y', GETDATE()
	FROM SCOPES
	WHERE APP_ID = @PARENT_APP_ID
	
END
--复制应用角色
IF (@ROLE_STATE=1)
BEGIN
	INSERT INTO ROLES(ID, APP_ID, NAME, CODE_NAME, DESCRIPTION, CLASSIFY, SORT_ID, INHERITED, ALLOW_DELEGATE, MODIFY_TIME)
	SELECT NEWID(), @CURRENT_APP_ID, NAME, CODE_NAME, DESCRIPTION, CLASSIFY, SORT_ID, 'y', ALLOW_DELEGATE, GETDATE()
	FROM ROLES
	WHERE APP_ID =	@PARENT_APP_ID
	AND CLASSIFY = 'n'
	--找出应用角色的对应关系
	SELECT FATHER.ID F_ID, SON.ID S_ID 
	INTO #ROLE_RELATION
	FROM ROLES FATHER INNER JOIN ROLES SON
	ON FATHER.CODE_NAME = SON.CODE_NAME
	WHERE FATHER.APP_ID = @PARENT_APP_ID
	AND   FATHER.CLASSIFY = 'n'
	AND   SON.APP_ID = @CURRENT_APP_ID
	AND   SON.CLASSIFY = 'n'
END
--复制应用功能、功能集合
IF (@FUNC_STATE=1)
BEGIN
	--应用功能
	INSERT INTO FUNCTIONS(ID, APP_ID, NAME, CODE_NAME, DESCRIPTION, CLASSIFY, SORT_ID, INHERITED, MODIFY_TIME)
	SELECT NEWID(), @CURRENT_APP_ID, NAME, CODE_NAME, DESCRIPTION, CLASSIFY, SORT_ID, 'y', GETDATE()
	FROM FUNCTIONS
	WHERE APP_ID =	@PARENT_APP_ID
	AND CLASSIFY = 'n'
	
	--找出应用功能的对应关系
	SELECT FATHER.ID F_ID, SON.ID S_ID 
	INTO #FUNC_RELATION
	FROM FUNCTIONS FATHER INNER JOIN FUNCTIONS SON
	ON FATHER.CODE_NAME = SON.CODE_NAME
	WHERE FATHER.APP_ID = @PARENT_APP_ID
	AND   FATHER.CLASSIFY = 'n'
	AND   SON.APP_ID = @CURRENT_APP_ID
	AND   SON.CLASSIFY = 'n'
	--应用功能集合
	--ALTER TABLE FUNCTION_SETS DISABLE TRIGGER TRIG_FUNC_SET_INSERT --禁用触发器
	INSERT INTO FUNCTION_SETS(ID, APP_ID, NAME, CODE_NAME, DESCRIPTION, CLASSIFY, SORT_ID, CHILDREN_COUNT, RESOURCE_LEVEL, LOWEST_SET, INHERITED, MODIFY_TIME)
	SELECT NEWID(), @CURRENT_APP_ID, NAME, CODE_NAME, DESCRIPTION, CLASSIFY, SORT_ID, 0, RESOURCE_LEVEL, LOWEST_SET, 'y', GETDATE()
	FROM FUNCTION_SETS
	WHERE APP_ID =	@PARENT_APP_ID
	AND CLASSIFY = 'n'
	ORDER BY RESOURCE_LEVEL
	--ALTER TABLE FUNCTION_SETS ENABLE TRIGGER TRIG_FUNC_SET_INSERT --启动触发器
	--找出功能集合的对应关系
	SELECT FATHER.ID F_ID, SON.ID S_ID 
	INTO #FUNC_SET_RELATION
	FROM FUNCTION_SETS FATHER INNER JOIN FUNCTION_SETS SON
	ON FATHER.CODE_NAME = SON.CODE_NAME
	WHERE FATHER.APP_ID = @PARENT_APP_ID
	AND   FATHER.CLASSIFY = 'n'
	AND   SON.APP_ID = @CURRENT_APP_ID
	AND   SON.CLASSIFY = 'n'
	--复制功能、功能集合对应关系
	SELECT * 
	INTO #FATHER_FUNC_SET_TO_FUNCS
	FROM FUNC_SET_TO_FUNCS
	WHERE FUNC_ID IN (SELECT ID FROM FUNCTIONS WHERE APP_ID = @PARENT_APP_ID AND CLASSIFY = 'n')
	
	--ALTER TABLE FUNC_SET_TO_FUNCS DISABLE TRIGGER TRIG_FUNC_SET_TO_FUNC_INSERT  --禁用触发器
	INSERT INTO FUNC_SET_TO_FUNCS(FUNC_SET_ID, FUNC_ID, SORT_ID)
	SELECT SET_R.S_ID, FUNC_R.S_ID, FATHER.SORT_ID  
	FROM #FUNC_SET_RELATION SET_R, #FUNC_RELATION FUNC_R, #FATHER_FUNC_SET_TO_FUNCS FATHER
	WHERE SET_R.F_ID = FATHER.FUNC_SET_ID
	AND   FUNC_R.F_ID = FATHER.FUNC_ID
	--ALTER TABLE FUNC_SET_TO_FUNCS ENABLE TRIGGER TRIG_FUNC_SET_TO_FUNC_INSERT --启动触发器
	 
END
--复制角色功能对应关系
IF (@ROLE_STATE=1 AND @FUNC_STATE=1 AND @RTF_STATE=1)
BEGIN
	--复制角色、功能对应关系
	SELECT * 
	INTO #FATHER_ROLE_TO_FUNCTIONS
	FROM ROLE_TO_FUNCTIONS
	WHERE FUNC_ID IN (SELECT ID FROM FUNCTIONS WHERE APP_ID = @PARENT_APP_ID AND CLASSIFY = 'n')
	
	INSERT INTO ROLE_TO_FUNCTIONS(ROLE_ID, FUNC_ID, INHERITED)
	SELECT ROLE_R.S_ID, FUNC_R.S_ID, 'y'  
	FROM #ROLE_RELATION ROLE_R, #FUNC_RELATION FUNC_R, #FATHER_ROLE_TO_FUNCTIONS FATHER
	WHERE ROLE_R.F_ID = FATHER.ROLE_ID
	AND   FUNC_R.F_ID = FATHER.FUNC_ID
END
--复制被授权对象
IF (@ROLE_STATE=1 AND @OBJ_STATE=1)
BEGIN
	--被授权对象
	SELECT * 
	INTO #FATHER_EXPRESSIONS
	FROM EXPRESSIONS
	WHERE ROLE_ID IN (SELECT ID FROM ROLES WHERE APP_ID = @PARENT_APP_ID AND CLASSIFY = 'n')
	INSERT INTO EXPRESSIONS(ID, ROLE_ID, NAME,EXPRESSION, DESCRIPTION, CLASSIFY, SORT_ID, INHERITED, MODIFY_TIME)
	SELECT NEWID(), ROLE_R.S_ID, NAME,EXPRESSION, DESCRIPTION, CLASSIFY, SORT_ID, 'y', GETDATE()
	FROM #FATHER_EXPRESSIONS FATHER INNER JOIN #ROLE_RELATION ROLE_R
	ON FATHER.ROLE_ID = ROLE_R.F_ID
	
	--找出被授权对象（表达式）的对应关系
	SELECT FATHER.ID F_ID, SON.ID S_ID 
	INTO #EXPRESSION_RELATION
	FROM EXPRESSIONS FATHER, EXPRESSIONS SON
	WHERE FATHER.EXPRESSION = SON.EXPRESSION
	AND FATHER.ROLE_ID IN (SELECT F_ID FROM #ROLE_RELATION)
	AND SON.ROLE_ID IN (SELECT S_ID FROM #ROLE_RELATION) 
	--复制被授权对象的服务范围
	IF (@SCOPE_STATE=1)
	BEGIN
		--找出服务范围的对应关系
		SELECT FATHER.ID F_ID, SON.ID S_ID 
		INTO #SCOPE_RELATION
		FROM SCOPES FATHER INNER JOIN SCOPES SON
		ON FATHER.CODE_NAME = SON.CODE_NAME
		WHERE FATHER.APP_ID = @PARENT_APP_ID
		AND   SON.APP_ID = @CURRENT_APP_ID
		--复制被授权对象、服务范围对应关系
		SELECT * 
		INTO #FATHER_EXP_TO_SCOPES
		FROM EXP_TO_SCOPES
		WHERE SCOPE_ID IN (SELECT ID FROM SCOPES WHERE APP_ID = @PARENT_APP_ID)
	
		INSERT INTO EXP_TO_SCOPES(EXP_ID, SCOPE_ID)
		SELECT EXP_R.S_ID, SCOPE_R.S_ID  
		FROM #EXPRESSION_RELATION EXP_R, #SCOPE_RELATION SCOPE_R, #FATHER_EXP_TO_SCOPES FATHER
		WHERE EXP_R.F_ID = FATHER.EXP_ID
		AND   SCOPE_R.F_ID = FATHER.SCOPE_ID
	END
END
