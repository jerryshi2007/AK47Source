<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActivityIsNotRunning" xml:space="preserve">
    <value>当前点并不处于活动状态</value>
  </data>
  <data name="ActivityMustInProcessDescriptor" xml:space="preserve">
    <value>添加连线定义时的节点定义必须已经包含在流程定义中</value>
  </data>
  <data name="ActivityNotCompleted" xml:space="preserve">
    <value>当前点没未达到完成条件</value>
  </data>
  <data name="CanNotCacelProcess" xml:space="preserve">
    <value>已经取消的流程不能再次取消</value>
  </data>
  <data name="CanNotFoundActivityDescriptorByKey" xml:space="preserve">
    <value>不能找到Key为{0}的流程节点定义</value>
  </data>
  <data name="CanNotFoundApplicationCodeName" xml:space="preserve">
    <value>不能在授权系统中找到CodeName为"{0}"的应用</value>
  </data>
  <data name="CanNotFoundProcessByID" xml:space="preserve">
    <value>不能找到ID为{0}的流程实例</value>
  </data>
  <data name="CanNotFoundRoleCodeName" xml:space="preserve">
    <value>不能在授权系统中找到CodeName为"{0}"的角色</value>
  </data>
  <data name="CanNotMapVarDataTypeToSysType" xml:space="preserve">
    <value>不能将VariableDescriptor的DataType"{0}"映射到System.Type中</value>
  </data>
  <data name="CannotModifyActivityKeyInProcess" xml:space="preserve">
    <value>已经加入到流程定义中的节点不能修改Key值</value>
  </data>
  <data name="DuplicateDescriptorKey" xml:space="preserve">
    <value>在集合中添加对象类型{0}时，Key属性值"{1}"重复</value>
  </data>
  <data name="InexistenceKey" xml:space="preserve">
    <value>从集合中删除对象类型为{0}，Key属性值“{1}”时不存在</value>
  </data>
  <data name="InvalidWfOguRoleID" xml:space="preserve">
    <value>WfOguRole的Key:{0}不合法，正确格式应为 appCode:roleCode</value>
  </data>
  <data name="InvalidWithdrawActivityID" xml:space="preserve">
    <value>非法的目标点ID{0}，撤回时的目标点的ID必须是已经流转过的节点</value>
  </data>
  <data name="OneProcessOnlyHasOneCompletedActivity" xml:space="preserve">
    <value>一个流程只能含有一个结束点</value>
  </data>
  <data name="OneProcessOnlyHasOneInitialActivity" xml:space="preserve">
    <value>一个流程只能含有一个起始点</value>
  </data>
  <data name="ProcessIsAborted" xml:space="preserve">
    <value>流程已经中止</value>
  </data>
  <data name="ProcessIsCompleted" xml:space="preserve">
    <value>流程已经结束</value>
  </data>
  <data name="ProcessIsNotRunning" xml:space="preserve">
    <value>流程没有启动</value>
  </data>
  <data name="ResourceCanNotGetUserList" xml:space="preserve">
    <value>类型{0}不支持GetUsetList方法</value>
  </data>
  <data name="TypeValueDoesNotMatch" xml:space="preserve">
    <value>类型与值不符</value>
  </data>
</root>