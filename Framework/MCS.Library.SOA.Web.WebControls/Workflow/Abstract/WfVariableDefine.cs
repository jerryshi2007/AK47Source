using System;
using System.Collections.Generic;
using System.Text;
using MCS.Library.Core;
using MCS.Library.OGUPermission;
using MCS.Library.SOA.DataObjects.Workflow;
using MCS.Library.SOA.DataObjects;

namespace MCS.Web.WebControls
{
	/// <summary>
	/// 流程定义中的变量名称的常量
	/// </summary>
	public static class WfVariableDefine
	{
		/// <summary>
		/// 允许加签
		/// </summary>
		public const string AddAppoverVariableName = "AddApprover";

		/// <summary>
		/// 是加签点的变量
		/// </summary>
		public const string IsAddAppoverActivityVariableName = "IsAddAppoverActivity";

		/// <summary>
		/// 允许转签
		/// </summary>
		public const string ChangeAppoverVariableName = "ChangeApprover";

		/// <summary>
		/// 是转签点的变量
		/// </summary>
		public const string IsChangeAppoverActivityVariableName = "IsChangeAppoverActivity";

		/// <summary>
		/// 允许会签
		/// </summary>
		public const string ConsignAppoverVariableName = "ConsignApprover";

		/// <summary>
		/// 允许增加附件
		/// </summary>
		public const string AddAttachmentVariableName = "AddAttachment";

		/// <summary>
		/// 允许修改附件
		/// </summary>
		public const string ChangeAttachmentVariableName = "ChangeAttachment";

		/// <summary>
		/// 级别名称的变量名
		/// </summary>
		public const string LevelNameVariableName = "LevelName";

		/// <summary>
		/// 所有会签者都同意才通过的变量名
		/// </summary>
		public const string AllAgreeWhenConsignVariableName = "AllAgreeWhenConsign";

		/// <summary>
		/// 自动生成的节点变量名
		/// </summary>
		public const string AutoGeneratedActivityVariableName = "AutoGeneratedActivityVariable";

		/// <summary>
		/// 禁止修改后续环节
		/// </summary>
		public const string ForbidModifyNextStepsVariableName = "ForbidModifyNextSteps";

		/// <summary>
		/// 允许运行时删除节点
		/// </summary>
		public const string AllowDeleteActivityWhenRuntimeVariableName = "AllowDeleteActivityWhenRuntime";

		/// <summary>
		/// 允许运行时修改节点
		/// </summary>
		public const string AllowModifyActivityWhenRuntimeVariableName = "AllowModifyActivityWhenRuntime";

		/// <summary>
		/// 允许手工删除该环节
		/// </summary>
		public const string AllowDeleteActivityVariableName = "AllowDeleteActivity";

		/// <summary>
		/// 允许手工添加后续环节
		/// </summary>
		public const string AllowAppendActivityVariableName = "AllowAppendActivity";

		/// <summary>
		/// 环节允许不设置审批人员
		/// </summary>
		public const string AllowEmptyOperatorVariableName = "AllowEmptyOperator";

		/// <summary>
		/// 环节必须不能设置审批人员
		/// </summary>
		public const string MustEmptyOperatorVariableName = "MustEmptyOperator";

		/// <summary>
		/// 参照的ActivityKey的变量名（有些节点从其它节点衍生出来，因此记录从那里衍生出来的）。
		/// 例如，加签操作会产生两个新的节点，这两个节点的ReferActivityKey就应该记录加签环节的Key。
		/// </summary>
		public const string ReferActivityKey = "ReferActivityKey";

		/// <summary>
		/// 节点中原始的资源定义信息
		/// </summary>
		public const string OriginalResourcesVariableName = "OriginalResources";

		/// <summary>
		/// 流程起草部门名称的上下文变量名称
		/// </summary>
		public const string ProcessDraftDepartmentNameVariableName = "ProcessDraftDepartmentName";

		/// <summary>
		/// 流程起草人ID的上下文变量名称
		/// </summary>
		public const string ProcessDraftUserIDVariableName = "ProcessDraftUserID";

		/// <summary>
		/// 流程起草人名称的上下文变量名称
		/// </summary>
		public const string ProcessDraftUserNameVariableName = "ProcessDraftUserName";

		public const string PurposeVariableName = "Purpose";

		/// <summary>
		/// 送签的变量名
		/// </summary>
		public const string CirculateUsersVariableName = "circulateUsers";

		/// <summary>
		/// 是否归档的变量名
		/// </summary>
		public const string CanPigeonholeVariableName = "canPigeonhole";

		/// <summary>
		/// 用户的顶级部门必须等于流程的顶级部门的变量名
		/// </summary>
		public const string UserTopDeptMustEqualToProcessDeptVariableName = "UserTopDeptMustEqualToProcessDept";

		/// <summary>
		/// 节点描述创建者的ID变量名
		/// </summary>
		public const string ActivityDescriptorCreatorVariableName = "ActivityDescriptorCreator";

		/// <summary>
		/// 使用简单模式来编辑节点变量名
		/// </summary>
		public const string UseSmallEditModeVariableName = "UseSmallEditMode";

		/// <summary>
		/// 是否自动增加秘书节点变量名
		/// </summary>
		public const string IsAutoAddSecretaryActivityVariableName = "IsAutoAddSecretary";

		/// <summary>
		/// 允许作废流程
		/// </summary>
		public const string AllowAbortProcessVariableName = "AllowAbortProcess";

		/// <summary>
		/// 是否已经起草的变量名称
		/// </summary>
		public const string AlreadyDraftedVariableName = "AlreadyDrafted";

		/// <summary>
		/// 是否允许编辑意见
		/// </summary>
		public const string AllowWriteOpinionVariableName = "AllowWriteOpinion";

		/// <summary>
		/// 是否允许退件
		/// </summary>
		public const string AllowReturnVariableName = "AllowReturn";

		/// <summary>
		/// 是否允许被退件
		/// </summary>
		public const string AllowReturnToVariableName = "AllowReturnTo";

		/// <summary>
		/// 送签按钮名称和线的名称一样
		/// </summary>
		public const string MoveToButtonNameSameAsTransitionNameVariableName = "MoveToButtonNameSameAsTransitionName";

		/// <summary>
		/// 使用组选择界面的变量名称
		/// </summary>
		public const string UseGroupSelectorVariableName = "UseGroupSelector";

		/// <summary>
		/// 组选择的根路径名称
		/// </summary>
		public const string GroupSelectorRootPathVariableName = "GroupSelectorRootPath";

		#region Keys for Root Process Context
		/// <summary>
		/// 流程送签时的通知用户
		/// </summary>
		public const string MoveToNotifyUsersKey = "NotifyUsers";

		/// <summary>
		/// 流程中止时的通知用户
		/// </summary>
		public const string TerminateNotifyUsersKey = "TerminateUsers";

		/// <summary>
		/// 交办任务消息的上下文
		/// </summary>
		public const string AssignmentContextKey = "AssignmentContext";

		/// <summary>
		/// 交办任务消息的报送用户
		/// </summary>
		public const string AssignmentUsersKey = "AssignmentUsers";

		/// <summary>
		/// 交办任务消息的发起用户
		/// </summary>
		public const string AssignmentSourceUserIDKey = "AssignmentSourceUserID";

		/// <summary>
		/// 交办任务的关联流程 ID
		/// </summary>
		public const string AssignmentRelProcessIDKey = "AssignmentRelProcessID";

		/// <summary>
		/// 交办任务的标题
		/// </summary>
		public const string AssignmentSubjectKey = "AssignmentSubject";

		/// <summary>
		/// 交办任务的内容
		/// </summary>
		public const string AssignmentDescriptionKey = "AssignmentDescription";

		/// <summary>
		/// 交办任务的起草部门
		/// </summary>
		public const string AssignmentDraftDeptNameKey = "AssignmentDraftDeptName";

		/// <summary>
		/// 任务下达的通知用户
		/// </summary>
		public const string DistributeUsersKey = "DistributeUsers";

		/// <summary>
		/// 是否自动通知
		/// </summary>
		public const string NotifyWhenLeaveVariableName = "NotifyWhenLeave";

		/// <summary>
		/// 自动通知的环节名称
		/// </summary>
		public const string NotifyWhenLeaveActivityKeyVariableName = "NotifyWhenLeaveActivityKey";

		/// <summary>
		/// 自动通知的内容
		/// </summary>
		public const string NotifyWhenLeaveTextVariableName = "NotifyWhenLeaveText";

		#endregion Keys for Root Process Context

		/// <summary>
		/// 是否自动通知
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool NotifyWhenLeave(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.NotifyWhenLeaveVariableName, false);
		}

		/// <summary>
		/// 自动通知的环节的Key，用英文逗号或分号分开
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static string NotifyWhenLeaveActivityKey(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.NotifyWhenLeaveActivityKeyVariableName, string.Empty);
		}

		/// <summary>
		/// 自动通知的内容
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static string NotifyWhenLeaveText(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.NotifyWhenLeaveTextVariableName, string.Empty);
		}

		/// <summary>
		/// 是否允许保存
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool AllowSave(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue("AllowSave", true);
		}

		/// <summary>
		/// 是否允许撤回
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool AllowWithdraw(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue("AllowWithdraw", true);
		}

		/// <summary>
		/// 允许运行时修改节点
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool AllowModifyActivityWhenRuntime(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.AllowModifyActivityWhenRuntimeVariableName, true);
		}

		/// <summary>
		/// 允许运行时删除节点
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool AllowDeleteActivityWhenRuntime(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.AllowDeleteActivityWhenRuntimeVariableName, true);
		}

		/// <summary>
		/// 是否使用组选择器
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool UseGroupSelector(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.UseGroupSelectorVariableName, false);
		}

		/// <summary>
		/// 组选择器的根路径名称
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static string GroupSelectorRootPath(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.GroupSelectorRootPathVariableName, string.Empty);
		}

		/// <summary>
		/// 是否可以作废
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool AllowAbortProcess(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.AllowAbortProcessVariableName, false);
		}

		/// <summary>
		/// 是否可以填写意见
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool AllowWriteOpinion(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.AllowWriteOpinionVariableName, true);
		}

		/// <summary>
		/// 是否允许退件
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool AllowReturn(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.AllowReturnVariableName, true);
		}

		/// <summary>
		/// 是否允许被退件
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool AllowReturnTo(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.AllowReturnToVariableName, true);
		}

		/// <summary>
		/// 送签按钮名称和线的名称一样
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool MoveToButtonNameSameAsTransitionName(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.MoveToButtonNameSameAsTransitionNameVariableName, false);
		}

		/// <summary>
		/// 是否自动添加秘书节点
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool IsAutoAddSecretaryActivity(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.IsAutoAddSecretaryActivityVariableName, true);
		}

		/// <summary>
		/// 是否使用简单模式来编辑节点
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool UseSmallEditModeDescriptor(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.UseSmallEditModeVariableName, false);
		}

		/// <summary>
		/// 用户是否是节点的创建者
		/// </summary>
		/// <param name="actDesp"></param>
		/// <param name="user"></param>
		/// <returns></returns>
		public static bool IsActivityDescriptorCreator(IWfActivityDescriptor actDesp, IUser user)
		{
			string userID = actDesp.Variables.GetValue(WfVariableDefine.ActivityDescriptorCreatorVariableName, string.Empty);

			return string.Compare(userID, user.ID, true) == 0;
		}

		/// <summary>
		/// 用户的顶级部门必须等于流程的顶级部门
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool UserTopDeptMustEqualToProcessDept(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.UserTopDeptMustEqualToProcessDeptVariableName, false);
		}

		/// <summary>
		/// 是否可以归档
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool CanPigeonhole(IWfActivityDescriptor actDesp)
		{
			return actDesp.Variables.GetValue(WfVariableDefine.CanPigeonholeVariableName, false);
		}

		public static OguDataCollection<IUser> GetCirculateUsers(IWfActivityDescriptor actDesp)
		{
			OguDataCollection<IUser> result = new OguDataCollection<IUser>();

			string serializedData = actDesp.Variables.GetValue(CirculateUsersVariableName, string.Empty);

			if (string.IsNullOrEmpty(serializedData) == false)
				result = SerializationHelper.DeserializeStringToObject<OguDataCollection<IUser>>(serializedData, SerializationFormatterType.Binary);

			return result;
		}

		public static void SetCirculateUsers(IWfActivityDescriptor actDesp, OguDataCollection<IUser> users)
		{
			string serializedData = string.Empty;

			if (users != null)
				serializedData = SerializationHelper.SerializeObjectToString(users, SerializationFormatterType.Binary);

			WfVariableDescriptor variable = actDesp.Variables[CirculateUsersVariableName];

			if (variable != null)
				variable.OriginalValue = serializedData;
			else
			{
				variable = new WfVariableDescriptor(CirculateUsersVariableName, serializedData);
				actDesp.Variables.Add(variable);
			}
		}

		/// <summary>
		/// 在流程上下文中设置流程的起草部门
		/// </summary>
		/// <param name="process"></param>
		/// <param name="user"></param>
		public static void SetProcessDraftDepartmentName(IWfProcess process, IUser user)
		{
			ExceptionHelper.FalseThrow<ArgumentNullException>(process != null, "process");
			ExceptionHelper.FalseThrow<ArgumentNullException>(user != null, "user");
			string deptName = GetUserDepartmentName(user);

			//process.RootProcess.Context[ProcessDraftDepartmentNameVariableName] = deptName; //12-29
			process.Context[ProcessDraftDepartmentNameVariableName] = deptName;
		}

		/// <summary>
		/// 在流程上下文中设置流程的起草人
		/// </summary>
		/// <param name="process"></param>
		/// <param name="user"></param>
		public static void SetProcessDraftUser(IWfProcess process, IUser user)
		{
			ExceptionHelper.FalseThrow<ArgumentNullException>(process != null, "process");
			ExceptionHelper.FalseThrow<ArgumentNullException>(user != null, "user");

			//process.RootProcess.Context[ProcessDraftUserIDVariableName] = user.ID; //12-29
			//process.RootProcess.Context[ProcessDraftUserNameVariableName] = user.DisplayName; //12-29

			process.Context[ProcessDraftUserIDVariableName] = user.ID;
			process.Context[ProcessDraftUserNameVariableName] = user.DisplayName;
		}

		/// <summary>
		/// 得到流程上下文中的拟稿人名称
		/// </summary>
		/// <param name="process"></param>
		/// <returns></returns>
		public static string GetProcessDraftUserID(IWfProcess process)
		{
			ExceptionHelper.FalseThrow<ArgumentNullException>(process != null, "process");

			//return process.RootProcess.Context.GetValue(ProcessDraftUserIDVariableName, string.Empty); //12-29
			return process.Context.GetValue(ProcessDraftUserIDVariableName, string.Empty);
		}

		/// <summary>
		/// 得到流程上下文中的拟稿人名称
		/// </summary>
		/// <param name="process"></param>
		/// <returns></returns>
		public static string GetProcessDraftUserName(IWfProcess process)
		{
			ExceptionHelper.FalseThrow<ArgumentNullException>(process != null, "process");

			//return process.RootProcess.Context.GetValue(ProcessDraftUserNameVariableName, string.Empty); //12-29
			return process.Context.GetValue(ProcessDraftUserNameVariableName, string.Empty);
		}

		/// <summary>
		/// 得到某个流程实例点的送阅人
		/// </summary>
		/// <param name="activity"></param>
		/// <returns></returns>
		public static OguDataCollection<IUser> GetActivityCirculators(IWfActivity activity)
		{
			OguDataCollection<IUser> result = new OguDataCollection<IUser>();

			if (activity != null)
				result = activity.Context.GetValue("circulators", result);

			return result;
		}

		/// <summary>
		/// 某个用户是否是某个节点的传阅人
		/// </summary>
		/// <param name="activity"></param>
		/// <param name="user"></param>
		/// <returns></returns>
		public static bool IsCirculatorInActivity(IWfActivity activity, IUser user)
		{
			OguDataCollection<IUser> users = GetActivityCirculators(activity);

			return users.Exists(u => string.Compare(u.ID, user.ID, true) == 0);
		}

		/// <summary>
		/// 设置某个流程实例点的送阅人
		/// </summary>
		/// <param name="activity"></param>
		/// <param name="users"></param>
		public static void SetActivityCirculators(IWfActivity activity, OguDataCollection<IUser> users)
		{
			activity.Context["circulators"] = users;
		}

		/// <summary>
		/// 获取用户的部门名称
		/// </summary>
		/// <param name="user"></param>
		/// <returns></returns>
		public static string GetUserDepartmentName(IUser user)
		{
			IOrganization parent = user.Parent;

			string deptName = string.Empty;

			if (parent != null)
			{
				deptName = parent.DisplayName;

				if (parent.Parent != null)
					deptName = parent.Parent.DisplayName + " " + deptName;
			}

			return deptName;
		}

		/// <summary>
		/// 得到流程上下文中的拟稿部门
		/// </summary>
		/// <param name="process"></param>
		/// <returns></returns>
		public static string GetProcessDraftDepartmentName(IWfProcess process)
		{
			ExceptionHelper.FalseThrow<ArgumentNullException>(process != null, "process");

			//return process.RootProcess.Context.GetValue(ProcessDraftDepartmentNameVariableName, string.Empty); //12-29
			return process.Context.GetValue(ProcessDraftDepartmentNameVariableName, string.Empty);
		}

		/// <summary>
		/// 替换原始节点的资源
		/// </summary>
		/// <param name="originalActivity"></param>
		/// <param name="resources"></param>
		public static void ReplaceOriginalActivityResources(IWfActivity originalActivity, WfResourceDescriptorCollection resources)
		{
			////IWfActivityDescriptor levelActDesp =
			////originalActivity.RootActivity.Descriptor.Process.GetAllLevels().FindLevelActivity(originalActivity.Descriptor);

			////IWfActivityDescriptor levelActDesp = originalActivity.Process.GetAllLevels(true).FindLevelActivity(originalActivity.Descriptor); //12-29
			//IWfActivityDescriptor levelActDesp = originalActivity.Process.GetAllLevels(true).FindLevelActivity(originalActivity.Descriptor);            

			//if (levelActDesp != null)
			//{
			//    levelActDesp.Resources.Clear();

			//    resources.ForEach(res => levelActDesp.Resources.Add(res));
			//}

			//12-29
		}

		/// <summary>
		/// 将环节节点的资源定义放在当前节点的上下文中
		/// </summary>
		/// <param name="originalActivity"></param>
		public static void AddOriginalResourcesToActivityContext(IWfActivity originalActivity)
		{
			////IWfActivityDescriptor levelActDesp =
			////originalActivity.RootActivity.Descriptor.Process.GetAllLevels().FindLevelActivity(originalActivity.Descriptor);

			//IWfActivityDescriptor levelActDesp = originalActivity.Process.GetAllLevels(true).FindLevelActivity(originalActivity.Descriptor);

			//if (levelActDesp != null)
			//{
			//    List<WfResourceDescriptor> resources = new List<WfResourceDescriptor>();

			//    levelActDesp.Resources.CopyTo(resources);

			//    string serializedRes = SerializationHelper.SerializeObjectToString(resources, SerializationFormatterType.Binary);

			//    originalActivity.Context[WfVariableDefine.OriginalResourcesVariableName] = serializedRes;
			//}

			//12-29
		}

		/// <summary>
		/// 如果当前节点中含有原始环节的资源定义，则恢复之
		/// </summary>
		/// <param name="targetActivity"></param>
		public static void RestoreOriginalResourcesFromActivityContext(IWfActivity targetActivity)
		{
			//string serializedRes = targetActivity.Context.GetValue(WfVariableDefine.OriginalResourcesVariableName, string.Empty);

			//if (string.IsNullOrEmpty(serializedRes) == false)
			//{
			//    List<WfResourceDescriptor> resources =
			//        SerializationHelper.DeserializeStringToObject<List<WfResourceDescriptor>>(serializedRes, SerializationFormatterType.Binary);

			//    //IWfActivityDescriptor levelActDesp =
			//    //targetActivity.RootActivity.Descriptor.Process.GetAllLevels().FindLevelActivity(targetActivity.Descriptor);
			//    IWfActivityDescriptor levelActDesp = targetActivity.Process.GetAllLevels(true).FindLevelActivity(targetActivity.Descriptor);

			//    if (levelActDesp != null)
			//    {
			//        levelActDesp.Resources.Clear();
			//        resources.ForEach(res => levelActDesp.Resources.Add(res));
			//    }
			//}

			//12-29
		}

		/// <summary>
		/// 当前的流程描述是否是加签点
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool IsAddAppoverActivity(IWfActivityDescriptor actDesp)
		{
			ExceptionHelper.FalseThrow<ArgumentNullException>(actDesp != null, "actDesp");

			return actDesp.Variables.GetValue(IsAddAppoverActivityVariableName, false);
		}

		/// <summary>
		/// 当前的流程描述是否允许被手工删除
		/// </summary>
		public static bool AllowDeleteActivity(IWfActivityDescriptor actDesp)
		{
			ExceptionHelper.FalseThrow<ArgumentNullException>(actDesp != null, "actDesp");

			return actDesp.Variables.GetValue(AllowDeleteActivityVariableName, false);
		}

		/// <summary>
		/// 当前的流程描述是否允许添加后续环节
		/// </summary>
		public static bool AllowAppendActivity(IWfActivityDescriptor actDesp)
		{
			ExceptionHelper.FalseThrow<ArgumentNullException>(actDesp != null, "actDesp");

			return actDesp.Variables.GetValue(AllowAppendActivityVariableName, false);
		}

		/// <summary>
		/// 当前流程描述中，是否允许调整后续流程
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool ForbidModifyNextStepActivities(IWfActivityDescriptor actDesp)
		{
			ExceptionHelper.FalseThrow<ArgumentNullException>(actDesp != null, "actDesp");

			return actDesp.Variables.GetValue(ForbidModifyNextStepsVariableName, true);
		}

		/// <summary>
		/// 当前的流程描述是否是转签点
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool IsChangeAppoverActivity(IWfActivityDescriptor actDesp)
		{
			ExceptionHelper.FalseThrow<ArgumentNullException>(actDesp != null, "actDesp");

			return actDesp.Variables.GetValue(IsChangeAppoverActivityVariableName, false);
		}

		/// <summary>
		/// 是否是自动生成的节点
		/// </summary>
		/// <param name="actDesp"></param>
		/// <returns></returns>
		public static bool IsAutoGeneratedActivity(IWfActivityDescriptor actDesp)
		{
			ExceptionHelper.FalseThrow<ArgumentNullException>(actDesp != null, "actDesp");

			return actDesp.Variables.GetValue(AutoGeneratedActivityVariableName, false);
		}
	}
}
