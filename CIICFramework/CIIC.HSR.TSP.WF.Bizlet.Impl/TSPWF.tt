<#@ template hostspecific="true" language="C#" #>
<#
var nm="CIIC.HSR.TSP.WF";
#>
using <#=nm#>.Bizlet.Contract;
using <#=nm#>.Bizlet.Impl;
using CIIC.HSR.TSP.Services;
using CIIC.HSR.TSP.IoC;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
<#
var rootClassName= System.IO.Path.GetFileNameWithoutExtension (this.Host.TemplateFile);
var path=System.IO.Path.GetDirectoryName (this.Host.TemplateFile);
var fs=System.IO.Directory.GetFiles (path,"*Bizlet.cs");
var alteredMapping=new System.Collections.Generic.Dictionary<string,Tuple<string,string>  > 
	{
	//	{"BizDictBizlet",Tuple.Create("IBizDictContract","")},
	//	{"LoginSuccessBizlet",Tuple.Create("ILoginSuccessContract","")},



    };
 
#>
namespace <#=nm#>.Bizlet.Impl
{
	public class <#=rootClassName#>AutoGenBizletsIoCConfigure : IIoCConfigure
	{
		public void Configure(IIoCContainer container)
		{
<#
    foreach(var f in fs)
	{
        var cls=System.IO.Path.GetFileNameWithoutExtension(f);
        Tuple<string,string>  intf=null;
		if (!alteredMapping.TryGetValue (cls,out intf ))
		{
		      intf=Tuple.Create ("I"+cls,"");
		}
#>
            container.Register<<#=intf.Item1#>, <#=cls#>>(<#=string.IsNullOrWhiteSpace (intf.Item2) ? "" :("\"" +intf.Item2 + "\",")#> alwaysNew: true);
				
<#            
    
    }
#>						   
		}
	}
}
